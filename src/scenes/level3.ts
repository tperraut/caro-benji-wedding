import {GameObj, Vec2} from "kaplay";

const IS_DEBUG = false;

function formatTime(seconds: number): string {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
}

function drawHole(p: Vec2) {
  return add([
    pos(p),
    sprite("hole"),
    anchor("center"),
    scale(vec2(0.2, 0.2)),
    area(),
    body({isStatic: true}),
    outline(3, rgb(255, 0, 0), IS_DEBUG ? 1 : 0),
    "hole"
  ]);
}

function drawRoad(positions: Vec2[]) {
  if (positions.length === 0) {
    return;
  }
  return add([
    pos(0, 0),
    polygon(positions, {fill: false}),
    area(),
    body({isStatic: true}),
    color("#000000"),
    outline(3, rgb(255, 0, 0), IS_DEBUG ? 1 : 0),
    "road",
    {myId: `${positions[0]}`},
  ]);
}

function drawBike(path: Vec2[]) {
  if (path.length < 2) {
    return;
  }
  const b = add([
    pos(path[0]),
    sprite(randi() == 0 ? "bike_boy" : "bike_girl"),
    scale(0.06, 0.06),
    anchor("center"),
    area({collisionIgnore: ["hole", "road", "kebab", "people"]}),
    body({isStatic: true}),
    rotate(),
    outline(3, rgb(255, 0, 0), IS_DEBUG ? 1 : 0),
    "bicycle",
    {path: path}
  ]);

  let i = 1;
  let targetPos = b.path[0];
  b.onUpdate(() => {
    const dist = b.pos.dist(targetPos);
    if (dist < 1) {
      i = (i + 1) % b.path.length;
      targetPos = b.path[i];

      if (!b.flipX) {
        b.flipX = true;
      }

      // player.moveTo(targetPos, player.speed);

      const dir = targetPos.sub(b.pos).unit();
      const angle = dir.angle();
      if (angle < -90 || angle > 90) {
        b.flipY = true;
        b.area.offset.y = -80;
      } else {
        b.flipY = false;
        b.area.offset.y = 80;
      }

      b.angle = angle;
    }
    b.moveTo(targetPos, 100);
  });
}

function drawKebab(p: Vec2) {
  const e = add([
    pos(p),
    sprite("kebab"),
    anchor("center"),
    scale(0.05, 0.05),
    area(),
    animate(),
    outline(3, rgb(0, 255, 0), IS_DEBUG ? 1 : 0),
    "kebab"
  ]);
  e.animate("scale", [vec2(0.05, 0.05), vec2(0.06, 0.06), vec2(0.05, 0.05)], {duration: 2})
  return e;
}

function drawPeople(peopleSpawns: {door: Vec2, road: Vec2}[]) {
  const startI = randi(0, peopleSpawns.length)
  const start = peopleSpawns[startI];
  const end = peopleSpawns[(startI * 2 + 1) % peopleSpawns.length];
  const p = add([
    pos(start.door),
    sprite("shopping_girl"),
    scale(0.06, 0.06),
    anchor("center"),
    area({collisionIgnore: ["hole", "road", "kebab", "people"]}),
    body({isStatic: true}),
    outline(3, rgb(255, 0, 0), IS_DEBUG ? 1 : 0),
    "people"
  ]);

  const path = [
    start.door, start.road, end.road, end.door
  ]
  let i = 0;
  let targetPos = path[0];
  p.onUpdate(() => {
    const dist = p.pos.dist(targetPos);
    if (dist < 1) {
      if (i == path.length - 1) {
        p.destroy();
        return;
      }
      i = (i + 1) % path.length;
      const lastPos = targetPos;
      targetPos = path[i];

      p.flipX = targetPos.x > lastPos.x;
    }
    p.moveTo(targetPos, 50);
  });

  wait(randi(5, 15), () => drawPeople(peopleSpawns));
}

function drawCar(path: Vec2[], stopAtLast: boolean = false) {
  if (path.length < 2) {
    return;
  }
  const b = add([
    pos(path[0]),
    sprite(randi(0, 10) < 8 ? "car" : "sport_car"),
    scale(0.06, 0.06),
    anchor("center"),
    area({collisionIgnore: ["hole", "road", "kebab", "people", "car"]}),
    body({isStatic: true}),
    rotate(),
    outline(3, rgb(255, 0, 0), IS_DEBUG ? 1 : 0),
    "car",
    {path: path}
  ]);

  let i = 1;
  let targetPos = b.path[0];
  b.onUpdate(() => {
    const dist = b.pos.dist(targetPos);
    if (dist < 1) {
      i = (i + 1) % b.path.length;
      targetPos = b.path[i];

      if (!b.flipX) {
        b.flipX = true;
      }

      // player.moveTo(targetPos, player.speed);

      const dir = targetPos.sub(b.pos).unit();
      const angle = dir.angle();
      if (angle < -90 || angle > 90) {
        b.flipY = true;
        b.area.offset.y = -80;
      } else {
        b.flipY = false;
        b.area.offset.y = 80;
      }

      b.angle = angle;
    }
    b.moveTo(targetPos, 100);
  });
}

function drawBoat(positions: Vec2[]) {
  if (positions.length === 0) {
    return;
  }
  return add([
    pos(0, 0),
    polygon(positions, {fill: false}),
    area(),
    body({isStatic: true}),
    outline(3, rgb(0, 255, 0), IS_DEBUG ? 1 : 0),
    "boat"
  ]);
}

function drawDoubleBicycle(positions: Vec2[]) {
  if (positions.length === 0) {
    return;
  }
  return add([
    pos(0, 0),
    polygon(positions, {fill: false}),
    area(),
    body({isStatic: true}),
    outline(3, rgb(255, 0, 0), IS_DEBUG ? 1 : 0),
    "bicycle"
  ]);
}

function drawWater(positions: Vec2[]) {
  if (positions.length === 0) {
    return;
  }
  return add([
    pos(0, 0),
    polygon(positions, {fill: false}),
    area(),
    body({isStatic: true}),
    outline(3, rgb(0, 0, 255), IS_DEBUG ? 1 : 0),
    "water"
  ]);
}

export function createLevel3Scene() {
  return scene("level3", () => {

    // debug.inspect = IS_DEBUG;

    let isMoving = false;
    let isReady = true;
    let targetPos = vec2(0, 0);
    let countdownTime = 120; // 2 minutes


    setGravity(0);

    add([pos(0, 0), rect(width(), height()), color("#FFFFFF")]);
    const background = add(["background", sprite("level3BG", {fill: true}),
      scale(vec2(1, 1)), anchor("topleft")]);

    const player = add([
      "player",
      sprite("benji"),
      scale(vec2(0.10, 0.10)),
      pos(vec2(6103.13, 1909.93)),
      body({isStatic: false, maxVelocity: 0, gravityScale: 0}),
      area({shape: new Rect(vec2(0.0), 250, 200), cursor: "text", offset: vec2(-50, 80)}),
      anchor("center"),
      rotate(),
      {
        speed: 200,
        moveDirection: vec2(0, 0),
        lastGoodPos: vec2(6039.13, 1909.93),
        blink({duration = 0.5, loops = 1, onFinish}: {duration?: number, loops?: number, onFinish?: () => void}) {
          let flashCount = 0;
          const timeToWait = duration / loops;
          const flash = () => {
            if (flashCount >= loops) {
              this.opacity = 1;
              onFinish?.();
              return;
            };
            this.opacity = this.opacity === 1 ? 0.5 : 1;
            flashCount++;
            wait(timeToWait, flash);
          };
          flash();
        }
      }
    ]);

    const timerText = add([
      text("00:00", {
        size: 48,
        font: "monospace", // Use monospace for consistent spacing
      }),
      pos(width() / 2, 50),
      anchor("center"),
      color(0, 0, 0),
      outline(2, rgb(0, 0, 0)), // Black outline for better visibility
      layer("ui"),
      fixed(), // Stay in place when camera moves
    ]);

    const maxSpeedText = add([
      text(`Max Speed: ${player.speed}`, {
        size: 20,
        font: "monospace", // Use monospace for consistent spacing
      }),
      pos(width() - 10, height() - 10),
      anchor("botright"),
      color(0, 0, 0),
      outline(2, rgb(0, 0, 0)), // Black outline for better visibility
      layer("ui"),
      fixed(), // Stay in place when camera moves
    ]);

    // Get background dimensions for camera bounds
    const bgWidth = background.width * background.scale.x;
    const bgHeight = background.height * background.scale.y;
    const screenWidth = width();
    const screenHeight = height();

    // Camera follows player with bounds checking
    onUpdate(() => {
      countdownTime -= dt();
      if (countdownTime <= 0) {
        countdownTime = 0;
        // TODO : game over logic
      }
      timerText.text = formatTime(Math.max(0, countdownTime));

      // Calculate desired camera position (center on player)
      let camX = player.pos.x
      let camY = player.pos.y
      camX = clamp(camX, screenWidth / 2, bgWidth - screenWidth / 2);
      camY = clamp(camY, screenHeight / 2, bgHeight - screenHeight / 2);

      // Set camera position
      setCamPos(camX, camY);

      if (!isMoving || !isReady) {
        return;
      }
      const dist = player.pos.dist(targetPos);
      if (dist < 1) {
        isMoving = false;
        return;
      }

      player.moveTo(targetPos, player.speed);
    });

    onDraw(() => {
      if (isMoving || !isReady) return;

      const worldMousePos = toWorld(mousePos());

      // Draw line from player to mouse
      drawLine({
        p1: player.pos,
        p2: worldMousePos,
        width: 1,
        color: rgb(0, 0, 0),
      });

      drawCircle({
        pos: worldMousePos,
        fill: true,
        radius: 2,
        color: rgb(0, 0, 0),
      });
    });


    if (IS_DEBUG) {
      let positions: Vec2[] = [];
      let points: GameObj[] = [];
      onKeyPress("space", () => {
        let toPrint = "";
        for (const p of positions) {
          toPrint += `, vec2(${p.x}, ${p.y})`;
        }
        console.log(toPrint);
        for (const p of points) {
          p.destroy();
        }
        positions = []; // Clear positions after printing
      });

      let drawn: GameObj | null = null;
      onKeyPress("d", () => {
        // drawn = drawRoad(positions);
        drawn = drawHole(positions[0]);
        // drawn = drawKebab(positions[0]);
      });

      onKeyPress("r", () => {
        drawn?.destroy();
      });

      onClick(() => {
        points.push(add([
          pos(targetPos),
          circle(5, {fill: true}),
          color(0, 0, 255),
        ]));
        positions.push(targetPos); // TODO : remove this line after debugging
      });
    }


    onClick(() => {
      if (isMoving || !isReady) return;

      targetPos = toWorld(mousePos());
      player.lastGoodPos = player.pos; // Save last good position

      isMoving = true;
      const dir = targetPos.sub(player.pos).unit();
      if (!player.flipX) {
        player.flipX = true;
      }

      // player.moveTo(targetPos, player.speed);

      const angle = dir.angle();
      if (angle < -90 || angle > 90) {
        player.flipY = true;
        player.area.offset.y = -80;
      } else {
        player.flipY = false;
        player.area.offset.y = 80;
      }

      player.angle = angle;
      player.moveDirection = dir;
    });

    //#region DRAW ROAD
    drawRoad([
      vec2(6443.733, 1838.744), vec2(6430.229, 1839.882), vec2(5961.678, 1839.895), vec2(5956.823, 1842.226), vec2(5956.085, 1819.915), vec2(5951.994, 1534.443), vec2(5948.245, 1272.380), vec2(6338.473, 1277.304)
    ]);

    drawRoad([
      vec2(5967.854, 1314.796), vec2(5944.180, 1336.330), vec2(5902.295, 1276.867), vec2(5874.733, 1253.496), vec2(5944.770, 1234.749)
    ]);

    drawRoad([
      vec2(5932.732, 1297.631), vec2(5934.726, 1297.125), vec2(5931.039, 1244.486), vec2(5924.448, 1225.326), vec2(5502.217, 1227.457), vec2(5380.891, 1230.641), vec2(5396.101, 1286.882)
    ]);

    drawRoad([
      vec2(5781.304, 1290.773), vec2(5395.983, 1289.596), vec2(5305.784, 999.544), vec2(5302.275, 991.901), vec2(5213.137, 712.461), vec2(5112.326, 454.599), vec2(5016.821, 251.209), vec2(5259.474, 186.521), vec2(5395.657, 458.179), vec2(5496.468, 677.840), vec2(5550.575, 905.610), vec2(5583.636, 1116.694), vec2(5590.003, 1240.497)
    ]);

    drawRoad([
      vec2(5041.144, 271.698), vec2(4685.321, 271.009), vec2(4687.089, 173.381), vec2(5055.667, 170.604)
    ]);

    drawRoad([
      vec2(4693.873, 249.837), vec2(4692.786, 253.728), vec2(4740.892, 317.752), vec2(4775.557, 381.422), vec2(4808.453, 450.397), vec2(4841.349, 523.264), vec2(4873.184, 608.865), vec2(4910.325, 693.404), vec2(4916.780, 709.073), vec2(4818.800, 707.658), vec2(4676.604, 705.182), vec2(4534.531, 702.714), vec2(4392.873, 700.253), vec2(4246.869, 696.730), vec2(4102.197, 695.669)
    ]);

    drawRoad([
      vec2(4207.855, 700.707), vec2(4180.972, 719.454), vec2(4168.592, 735.725), vec2(4168.946, 743.153), vec2(4101.739, 739.970), vec2(4134.529, 686.940)
    ]);

    drawRoad([
      vec2(4172.833, 739.713), vec2(4172.790, 741.274), vec2(4146.265, 727.424), vec2(4092.146, 722.118), vec2(4087.547, 755.014), vec2(4085.779, 987.763), vec2(4086.840, 1164.977), vec2(4170.318, 1163.562)
    ]);

    drawRoad([
      vec2(3534.374, 735.133), vec2(3488.744, 795.619), vec2(3555.364, 798.174)
    ]);

    drawRoad([
      vec2(3488.511, 169.896), vec2(3557.840, 126.389), vec2(3540.861, 231.090)
    ]);

    drawRoad([
      vec2(3509.380, 178.032), vec2(3123.470, 171.311), vec2(2747.464, 163.529), vec2(2748.879, 118.253), vec2(3122.055, 119.668), vec2(3493.816, 123.559)
    ]);

    drawRoad([
      vec2(2783.489, 159.992), vec2(2718.051, 208.452), vec2(2681.264, 144.075)
    ]);

    drawRoad([
      vec2(2739.981, 183.691), vec2(2742.542, 395.571), vec2(2278.459, 379.653), vec2(2048.186, 373.994), vec2(2048.540, 159.992)
    ]);

    drawRoad([
      vec2(2052.879, 279.196), vec2(2004.419, 201.024), vec2(2095.127, 198.548)
    ]);

    drawRoad([
      vec2(2054.803, 224.369), vec2(1764.398, 224.369), vec2(1724.427, 224.016), vec2(1730.087, 172.019), vec2(2060.462, 175.910)
    ]);

    drawRoad([
      vec2(1818.163, 220.125), vec2(1753.078, 269.646), vec2(1743.528, 207.391)
    ]);

    drawRoad([
      vec2(1774.302, 217.295), vec2(1765.105, 491.075), vec2(1502.644, 491.429), vec2(1488.495, 222.955)
    ]);

    drawRoad([
      vec2(1396.211, 886.706), vec2(1439.011, 785.188), vec2(1474.383, 688.268), vec2(1502.681, 595.240), vec2(1511.878, 514.591), vec2(1514.707, 429.698), vec2(1505.157, 357.185), vec2(1289.741, 395.387), vec2(1171.598, 408.121), vec2(1196.712, 631.673)
    ]);

    drawRoad([
      vec2(1335.342, 1019.449), vec2(1259.645, 1165.182), vec2(1197.390, 1275.543), vec2(976.315, 1116.368), vec2(1067.575, 991.859)
    ]);

    drawRoad([
      vec2(1165.551, 1320.345), vec2(987.275, 1582.099), vec2(858.176, 1474.553), vec2(742.156, 1329.174), vec2(861.006, 1203.957)
    ]);

    drawRoad([
      vec2(1023.742, 1519.229), vec2(1025.510, 1739.244), vec2(1025.156, 1956.075), vec2(1024.803, 2172.735), vec2(1024.450, 2389.414), vec2(1024.096, 2606.054), vec2(1023.743, 2822.734), vec2(1023.389, 3035.069), vec2(1023.389, 3272.062), vec2(683.817, 3003.234), vec2(579.115, 2913.742), vec2(573.102, 2909.144), vec2(568.504, 2714.597), vec2(566.735, 2522.527), vec2(566.032, 2332.310), vec2(566.739, 2145.545), vec2(567.093, 1958.780), vec2(567.093, 1863.275), vec2(883.673, 1650.688)
    ]);

    drawRoad([
      vec2(198.791, 2089.303), vec2(294.649, 2022.450), vec2(294.649, 2212.552), vec2(294.649, 2402.500), vec2(294.649, 2592.448), vec2(295.711, 2783.458), vec2(299.248, 2975.529), vec2(306.676, 3101.738), vec2(13.441, 3098.908), vec2(24.406, 2819.114), vec2(21.223, 2562.666), vec2(22.991, 2308.694), vec2(37.494, 2163.668)
    ]);


    drawRoad([
      vec2(364.333, 3088.026), vec2(294.296, 2999.595), vec2(251.849, 3042.396), vec2(293.942, 3103.236)
    ]);

    drawRoad([
      vec2(1726.306, 4082.913), vec2(2121.755, 4289.599), vec2(2123.524, 4373.171), vec2(1678.877, 4186.406)
    ]);

    drawRoad([
      vec2(2049.931, 4304.549), vec2(2094.146, 4271.653), vec2(2464.846, 4415.618), vec2(2458.833, 4433.304)
    ]);

    drawRoad([
      vec2(2348.826, 4367.865), vec2(2540.897, 4424.461), vec2(2538.568, 4445.330), vec2(2335.531, 4436.134)
    ]);

    drawRoad([
      vec2(2461.103, 4403.238), vec2(2665.907, 4437.195), vec2(2637.256, 4475.043), vec2(2446.246, 4448.868)
    ]);

    drawRoad([
      vec2(2606.836, 4428.352), vec2(2918.111, 4427.998), vec2(2905.730, 4464.078), vec2(2602.945, 4473.274)
    ]);

    drawRoad([
      vec2(2815.178, 4429.767), vec2(3093.203, 4401.469), vec2(3139.540, 4460.187), vec2(2813.055, 4477.519)
    ]);

    drawRoad([
      vec2(3066.320, 4403.238), vec2(3405.582, 4345.581), vec2(3468.191, 4431.535), vec2(3084.403, 4463.016)
    ]);

    drawRoad([
      vec2(3263.196, 4371.049), vec2(3630.359, 4279.081), vec2(3687.661, 4396.871), vec2(3308.472, 4434.365)
    ]);

    drawRoad([
      vec2(3518.229, 4310.916), vec2(3903.785, 4168.720), vec2(3984.080, 4350.887), vec2(3546.880, 4397.224)
    ]);

    drawRoad([
      vec2(4751.909, 3583.635), vec2(4913.206, 3322.943), vec2(5073.088, 3075.338), vec2(5232.970, 2828.440), vec2(5392.852, 2581.543), vec2(5853.044, 2582.604), vec2(5854.459, 2795.898), vec2(5857.289, 3004.240), vec2(5689.624, 3198.765), vec2(5522.314, 3392.958), vec2(5383.302, 3547.181)
    ]);

    drawRoad([
      vec2(5523.366, 1753.819), vec2(5460.050, 1507.275), vec2(5426.800, 1400.098), vec2(5659.549, 1401.866)
    ]);

    drawRoad([
      vec2(4742.634, 1623.132), vec2(4831.418, 1561.938), vec2(4839.200, 1650.722)
    ]);

    drawRoad([
      vec2(3851.128, 1442.731), vec2(3947.694, 1495.436), vec2(3886.854, 1540.005)
    ]);

    drawRoad([
      vec2(4207.800, 1289.481), vec2(4371.926, 1199.282), vec2(4343.629, 1335.111)
    ]);

    drawRoad([
      vec2(2500.169, 1614.533), vec2(2594.612, 1668.652), vec2(2607.947, 1570.407)
    ]);

    drawRoad([
      vec2(1445.835, 1073.637), vec2(1302.224, 1307.801), vec2(1313.543, 1411.795), vec2(1326.631, 1526.755), vec2(1349.269, 1744.293), vec2(1488.281, 1839.444), vec2(1879.497, 1839.091), vec2(1993.396, 1840.152), vec2(1992.688, 1627.211), vec2(1991.981, 1414.271), vec2(1991.273, 1201.331), vec2(1990.920, 1086.018)
    ]);

    drawRoad([
      vec2(2048.913, 368.061), vec2(2052.804, 598.333), vec2(2208.795, 603.285), vec2(2209.503, 419.704), vec2(2261.146, 345.776), vec2(2145.479, 276.800)
    ]);

    drawRoad([
      vec2(1012.747, 2955.648), vec2(1077.125, 3026.392), vec2(1070.404, 3114.115), vec2(946.955, 3092.538)
    ]);

    drawRoad([
      vec2(3079.489, 2143.769), vec2(2878.929, 2143.062), vec2(2874.684, 2371.566), vec2(2873.977, 2594.764), vec2(2869.732, 2759.244), vec2(3060.034, 2758.183), vec2(3067.462, 2758.183), vec2(3074.890, 2757.829), vec2(3079.489, 2493.599)
    ]);

    drawRoad([
      vec2(5956.008, 1848.626), vec2(5960.252, 1773.991), vec2(6302.301, 1775.759), vec2(6298.056, 1852.517)
    ]);

    drawRoad([
      vec2(6246.413, 1827.512), vec2(6245.705, 1919.009), vec2(6244.998, 1988.692), vec2(6443.082, 1988.338), vec2(6442.728, 1818.198)
    ]);

    drawRoad([
      vec2(5958.484, 1960.158), vec2(6349.700, 1960.865), vec2(6350.761, 2129.591), vec2(6350.761, 2298.316), vec2(6350.761, 2467.041), vec2(6350.761, 2635.766), vec2(6350.761, 2804.491), vec2(6350.761, 2973.216), vec2(6350.761, 3141.941), vec2(6350.761, 3310.666), vec2(5972.279, 3157.859), vec2(5969.803, 3009.296), vec2(5968.742, 2858.257), vec2(5967.680, 2707.218), vec2(5966.619, 2556.179), vec2(5965.565, 2406.102), vec2(5964.504, 2255.063)
    ]);

    drawRoad([
      vec2(6037.370, 3078.527), vec2(5968.742, 3045.277), vec2(5886.678, 3143.965), vec2(5804.261, 3243.007), vec2(5721.844, 3342.049), vec2(5638.012, 3440.384), vec2(5552.765, 3536.242), vec2(5468.226, 3632.455), vec2(5383.686, 3728.667), vec2(5299.147, 3823.818), vec2(5390.053, 3952.219), vec2(5554.887, 3748.829), vec2(5719.014, 3547.208), vec2(5885.263, 3347.355), vec2(6052.927, 3174.385)
    ]);

    drawRoad([
      vec2(3141.069, 785.256), vec2(3586.016, 781.898), vec2(4030.644, 778.360), vec2(4122.258, 779.068), vec2(4118.013, 963.357), vec2(4117.328, 1164.354), vec2(3699.937, 1169.306), vec2(3282.245, 1170.712), vec2(3138.280, 1169.297)
    ]);

    drawRoad([
      vec2(3525.252, 195.856), vec2(3528.081, 411.488), vec2(3529.850, 553.330), vec2(3531.616, 694.999), vec2(3530.199, 823.581), vec2(3796.552, 817.567), vec2(4078.114, 811.200), vec2(4129.403, 805.541), vec2(4134.002, 617.361), vec2(4131.526, 441.915), vec2(4129.056, 266.933)
    ]);

    drawRoad([
      vec2(3417.566, 671.851), vec2(3415.443, 522.226), vec2(3414.029, 371.895), vec2(3413.324, 287.614), vec2(2989.212, 280.185), vec2(2853.029, 277.002), vec2(2856.566, 470.134), vec2(2857.981, 672.109)
    ]);

    drawRoad([
      vec2(3032.514, 687.029), vec2(3029.331, 753.529), vec2(3028.623, 828.164), vec2(3027.916, 903.153), vec2(3027.208, 978.142), vec2(3026.501, 1053.131), vec2(3025.440, 1128.473), vec2(3026.505, 1169.882), vec2(2600.271, 1163.515), vec2(2605.931, 896.809), vec2(2610.881, 689.988)
    ]);

    drawRoad([
      vec2(2317.999, 796.812), vec2(2321.183, 526.215), vec2(2320.829, 495.088), vec2(2756.260, 509.590), vec2(2905.884, 516.311), vec2(2923.570, 725.007), vec2(2581.875, 804.240)
    ]);

    drawRoad([
      vec2(2805.442, 522.864), vec2(2864.160, 470.514), vec2(2888.566, 537.013)
    ]);

    drawRoad([
      vec2(1869.849, 591.886), vec2(1881.875, 335.438), vec2(1935.995, 334.377), vec2(1940.239, 574.200), vec2(1944.130, 735.497), vec2(1868.787, 738.327)
    ]);

    drawRoad([
      vec2(1578.878, 600.747), vec2(1535.371, 744.358), vec2(1944.273, 739.052), vec2(1938.967, 607.114)
    ]);

    drawRoad([
      vec2(1830.020, 605.699), vec2(1874.943, 569.265), vec2(1891.214, 624.800)
    ]);

    drawRoad([
      vec2(4314.999, 2968.162), vec2(4316.414, 2755.222), vec2(4316.414, 2545.111), vec2(4316.414, 2340.660), vec2(4313.230, 2201.294), vec2(4617.431, 2201.648), vec2(4863.621, 2200.940), vec2(5164.638, 2211.198), vec2(5135.279, 2352.333), vec2(5100.614, 2505.141), vec2(5096.723, 2533.792), vec2(5033.053, 2631.773), vec2(4969.123, 2729.611), vec2(4905.298, 2826.579), vec2(4841.275, 2923.853), vec2(4777.251, 3021.126), vec2(4723.839, 3109.910), vec2(4591.901, 3322.143), vec2(4548.393, 3395.010)
    ]);

    drawRoad([
      vec2(5192.520, 2067.140), vec2(5154.318, 2252.490), vec2(4787.509, 2256.734), vec2(4670.621, 2221.714), vec2(4681.232, 2196.246)
    ]);

    drawRoad([
      vec2(4328.094, 2961.598), vec2(4272.913, 3029.866), vec2(4341.889, 3065.946), vec2(4464.984, 3012.534)
    ]);

    drawRoad([
      vec2(4289.442, 3018.386), vec2(4247.703, 3018.033), vec2(4141.667, 3018.387), vec2(4035.551, 3018.741), vec2(3667.327, 3017.680), vec2(3306.884, 3016.619), vec2(3302.640, 3246.891), vec2(3299.810, 3328.955), vec2(3743.377, 3327.540), vec2(4182.345, 3326.478), vec2(4539.250, 3327.186)
    ]);

    drawRoad([
      vec2(3716.140, 3316.574), vec2(3798.383, 3393.321), vec2(3833.755, 3277.301)
    ]);

    drawRoad([
      vec2(3765.133, 3315.149), vec2(3765.841, 3431.877), vec2(3765.486, 3549.576), vec2(3765.133, 3667.365), vec2(3764.779, 3785.155), vec2(3764.779, 3921.691), vec2(3922.539, 3838.213), vec2(4076.054, 3745.891), vec2(4215.420, 3648.264), vec2(4350.542, 3547.454), vec2(4484.248, 3444.874), vec2(4547.918, 3394.292), vec2(4572.679, 3309.753), vec2(4266.710, 3285.346)
    ]);

    drawRoad([
      vec2(4199.945, 2570.530), vec2(4061.355, 2571.299), vec2(3922.696, 2570.237), vec2(3783.330, 2569.884), vec2(3643.964, 2569.530), vec2(3501.060, 2569.884), vec2(3357.803, 2569.884), vec2(3214.546, 2569.884), vec2(3071.289, 2569.884), vec2(2929.447, 2570.591), vec2(2927.324, 2806.523), vec2(3245.674, 2906.980), vec2(3490.883, 2906.429), vec2(3736.720, 2906.075), vec2(3982.556, 2905.721), vec2(4201.863, 2906.429)
    ]);

    drawRoad([
      vec2(2228.878, 2678.339), vec2(2229.585, 2871.117), vec2(2231.354, 3061.773), vec2(2235.245, 3250.661), vec2(2233.476, 3303.719), vec2(2584.014, 3310.439), vec2(2933.736, 3318.566), vec2(3189.420, 3326.347), vec2(3191.542, 3143.826), vec2(3194.018, 2962.367), vec2(3196.494, 2782.677), vec2(2838.175, 2679.036)
    ]);

    drawRoad([
      vec2(2888.049, 2633.760), vec2(2824.026, 2691.770), vec2(2890.185, 2722.953)
    ]);

    drawRoad([
      vec2(3125.056, 2583.940), vec2(3056.080, 2508.951), vec2(3041.931, 2577.219)
    ]);

    drawRoad([
      vec2(3259.116, 2891.324), vec2(3183.420, 2944.028), vec2(3177.760, 2869.040)
    ]);

    drawRoad([
      vec2(1469.286, 3004.869), vec2(1468.224, 3072.783), vec2(1924.879, 3072.783), vec2(2120.133, 3073.491), vec2(2121.194, 3004.515)
    ]);

    drawRoad([
      vec2(2023.954, 3761.497), vec2(2025.369, 3627.790), vec2(2025.015, 3491.608), vec2(2024.662, 3355.425), vec2(2025.015, 3219.242), vec2(2025.369, 3083.059), vec2(2026.076, 3006.655), vec2(2120.166, 3005.241), vec2(2121.453, 3098.979), vec2(2121.453, 3193.422), vec2(2121.453, 3287.374), vec2(2121.453, 3381.366), vec2(2121.453, 3475.338), vec2(2121.453, 3569.290), vec2(2119.684, 3668.214), vec2(2118.623, 3763.365)
    ]);

    drawRoad([
      vec2(2530.708, 3422.024), vec2(2099.522, 3411.412), vec2(2090.679, 3578.722), vec2(2084.666, 3762.657), vec2(2530.001, 3761.950)
    ]);

    drawRoad([
      vec2(2109.072, 3364.013), vec2(2171.681, 3429.452), vec2(2099.522, 3435.111)
    ]);

    drawRoad([
      vec2(1975.795, 3054.715), vec2(2032.744, 3119.446), vec2(2062.994, 3060.487)
    ]);

    drawRoad([
      vec2(1356.612, 3004.952), vec2(980.752, 3006.786), vec2(987.158, 3247.316), vec2(1265.183, 3451.414), vec2(1317.180, 3230.692), vec2(1355.028, 3208.053)
    ]);

    drawRoad([
      vec2(1912.445, 3183.631), vec2(1531.487, 3185.046), vec2(1195.097, 3184.339), vec2(1248.863, 3436.896), vec2(1444.471, 3576.969), vec2(1644.324, 3709.261), vec2(1839.585, 3829.297), vec2(1908.915, 3871.036), vec2(1912.098, 3821.515), vec2(1911.744, 3710.093), vec2(1911.038, 3595.113), vec2(1910.331, 3479.800)
    ]);

    drawRoad([
      vec2(1394.983, 3195.852), vec2(1341.217, 3125.461), vec2(1329.898, 3225.211)
    ]);

    drawRoad([
      vec2(1135.235, 1562.712), vec2(1204.564, 1463.316), vec2(1226.849, 1651.142), vec2(1245.950, 1821.636), vec2(1264.971, 1991.421), vec2(1283.993, 2161.206), vec2(1303.014, 2330.990), vec2(1322.034, 2500.755), vec2(1341.055, 2670.540), vec2(1360.077, 2840.324), vec2(1370.960, 2896.544), vec2(1137.151, 2894.776), vec2(1137.504, 2679.359), vec2(1139.273, 2463.589), vec2(1141.041, 2247.819), vec2(1139.273, 2055.395), vec2(1138.919, 1863.678)
    ]);

    drawRoad([
      vec2(1418.274, 1926.038), vec2(1224.788, 1797.283), vec2(1198.259, 1967.423), vec2(1188.001, 2133.672), vec2(1194.015, 2283.650), vec2(1427.117, 2288.956)
    ]);

    drawRoad([
      vec2(1391.745, 2323.267), vec2(1410.138, 2267.379), vec2(1479.468, 2365.714)
    ]);

    drawRoad([
      vec2(2117.520, 2327.631), vec2(1667.233, 2328.338), vec2(1348.176, 2328.692), vec2(1341.809, 2548.706), vec2(1343.224, 2742.192), vec2(1349.944, 2895.000), vec2(1591.890, 2896.061), vec2(1834.543, 2896.061), vec2(2119.289, 2895.353), vec2(2118.935, 2638.198)
    ]);

    drawRoad([
      vec2(2763.063, 2570.026), vec2(2765.539, 2302.966), vec2(2768.722, 2142.376), vec2(2366.541, 2142.376), vec2(2234.697, 2146.621), vec2(2226.915, 2271.838), vec2(2229.745, 2409.790), vec2(2231.160, 2567.196)
    ]);

    drawRoad([
      vec2(2105.670, 1737.137), vec2(2105.317, 2004.197), vec2(2110.976, 2219.259), vec2(2449.488, 2215.722), vec2(2460.453, 2090.505), vec2(2461.514, 1906.923), vec2(2460.807, 1741.028)
    ]);

    drawRoad([
      vec2(2060.919, 1950.673), vec2(1771.575, 1951.734), vec2(1532.459, 1951.380), vec2(1537.411, 2203.937), vec2(1534.228, 2218.793), vec2(1829.585, 2216.671), vec2(2117.868, 2215.964), vec2(2185.075, 2086.855)
    ]);

    drawRoad([
      vec2(2052.314, 1961.152), vec2(2130.133, 1908.801), vec2(2122.351, 2013.856)
    ]);

    drawRoad([
      vec2(2275.437, 2171.329), vec2(2179.932, 2208.470), vec2(2258.105, 2275.323)
    ]);

    drawRoad([
      vec2(2448.840, 2097.167), vec2(2512.510, 2163.313), vec2(2425.141, 2178.876)
    ]);

    drawRoad([
      vec2(5352.273, 3781.865), vec2(5271.271, 3783.634), vec2(5189.915, 3783.987), vec2(5103.961, 3784.341), vec2(4626.791, 3787.525), vec2(4478.935, 3788.586), vec2(4273.777, 3941.040), vec2(4042.796, 4084.297), vec2(3840.821, 4190.413), vec2(3885.037, 4370.695), vec2(4288.279, 4231.329), vec2(5093.703, 4048.809), vec2(5389.060, 4037.843)
    ]);

    drawRoad([
      vec2(2640.684, 3423.711), vec2(3051.194, 3435.402), vec2(3201.171, 3440.355), vec2(3200.051, 3601.296), vec2(3198.989, 3762.239), vec2(3197.928, 3923.182), vec2(3196.513, 4108.886), vec2(3003.028, 4138.599), vec2(2800.699, 4158.761), vec2(2704.841, 4165.835), vec2(2667.346, 3971.697), vec2(2642.232, 3817.121)
    ]);

    drawRoad([
      vec2(3179.040, 3440.611), vec2(3646.306, 3440.257), vec2(3654.537, 3439.551), vec2(3652.594, 3577.923), vec2(3652.241, 3715.167), vec2(3652.241, 3852.411), vec2(3652.948, 3970.908), vec2(3580.789, 4000.267), vec2(3499.787, 4028.211), vec2(3408.880, 4055.094), vec2(3298.166, 4081.269), vec2(3193.818, 4107.091), vec2(3097.959, 4124.423)
    ]);

    drawRoad([
      vec2(1964.989, 3870.805), vec2(1948.718, 3892.736), vec2(2039.625, 3942.257), vec2(2134.776, 3990.363), vec2(2235.233, 4037.054), vec2(2341.349, 4080.208), vec2(2450.649, 4119.117), vec2(2561.364, 4149.184), vec2(2672.786, 4165.455), vec2(2706.743, 4167.659), vec2(2766.896, 4085.596), vec2(2605.245, 3874.070)
    ]);

    drawRoad([
      vec2(2585.083, 3879.376), vec2(2656.889, 3838.698), vec2(2708.532, 3915.456), vec2(2666.670, 4009.545)
    ]);

    drawRoad([
      vec2(1984.433, 3886.868), vec2(1863.107, 3820.368), vec2(1840.115, 3833.102), vec2(1977.359, 3910.213)
    ]);

    drawRoad([
      vec2(658.275, 3339.002), vec2(345.232, 3070.528), vec2(241.238, 3111.913), vec2(545.792, 3359.518), vec2(657.634, 3446.720)
    ]);

    drawRoad([
      vec2(570.564, 3379.980), vec2(652.627, 3327.629), vec2(1005.641, 3599.641), vec2(1003.165, 3688.425)
    ]);

    drawRoad([
      vec2(964.963, 3653.406), vec2(1002.458, 3595.750), vec2(1391.198, 3870.238), vec2(1415.239, 3947.548)
    ]);

    drawRoad([
      vec2(1345.910, 3895.551), vec2(1375.269, 3861.948), vec2(1782.048, 4110.968), vec2(1745.969, 4143.864)
    ]);

    drawRoad([
      vec2(4779.037, 3565.911), vec2(4623.399, 3679.102), vec2(5000.715, 3675.834), vec2(5285.815, 3675.834), vec2(5420.583, 3516.659)
    ]);

    drawRoad([
      vec2(5835.035, 1405.523), vec2(5642.610, 1404.108), vec2(5535.849, 1642.168), vec2(5511.796, 1763.494), vec2(5490.572, 1925.145), vec2(5465.812, 2086.796), vec2(5439.637, 2247.739), vec2(5846.062, 2245.263), vec2(5845.709, 2027.371), vec2(5840.403, 1809.125)
    ]);

    drawRoad([
      vec2(5442.420, 2229.989), vec2(5384.763, 2496.341), vec2(5331.351, 2747.130), vec2(5651.115, 2666.128), vec2(5851.676, 2667.543), vec2(5848.634, 2438.681), vec2(5845.451, 2219.020)
    ]);

    drawRoad([
      vec2(4799.781, 819.342), vec2(4955.418, 820.756), vec2(5038.543, 1067.300), vec2(5119.899, 1315.259), vec2(5194.887, 1566.755), vec2(5240.164, 1745.738), vec2(4801.195, 1644.220), vec2(4801.067, 1476.690), vec2(4800.364, 1309.658), vec2(4800.717, 1141.640)
    ]);

    drawRoad([
      vec2(4008.381, 1613.504), vec2(4395.706, 1613.504), vec2(4783.031, 1613.504), vec2(5234.026, 1717.852), vec2(5240.393, 1754.993), vec2(5214.218, 1946.356), vec2(5014.719, 1998.353), vec2(4815.220, 2050.704), vec2(4660.997, 2089.967), vec2(4459.446, 2086.940), vec2(4253.226, 2085.171), vec2(4012.696, 2082.341)
    ]);

    drawRoad([
      vec2(4282.374, 810.128), vec2(4282.020, 1037.571), vec2(4281.666, 1266.782), vec2(4280.959, 1502.361), vec2(4689.153, 1502.714), vec2(4689.192, 1229.641), vec2(4689.546, 967.180), vec2(4689.900, 817.556)
    ]);

    drawRoad([
      vec2(4284.774, 1500.441), vec2(3908.768, 1503.270), vec2(3592.477, 1507.861), vec2(3587.812, 1280.763), vec2(4006.618, 1277.579), vec2(4328.151, 1276.164), vec2(4338.763, 1502.546)
    ]);

    drawRoad([
      vec2(3897.919, 2081.767), vec2(3897.212, 1847.957), vec2(3896.506, 1614.598), vec2(3894.031, 1461.907), vec2(3592.307, 1469.335), vec2(3596.552, 1645.489), vec2(3600.796, 1821.642), vec2(3605.041, 1997.795), vec2(3605.395, 2076.675)
    ]);

    drawRoad([
      vec2(2715.206, 1287.181), vec2(2276.945, 1257.114), vec2(2241.573, 1292.487), vec2(2516.799, 1339.147), vec2(2798.361, 1345.160)
    ]);

    drawRoad([
      vec2(3475.878, 1283.203), vec2(3021.346, 1280.727), vec2(2594.404, 1283.203), vec2(2241.037, 1291.339), vec2(2107.330, 1429.290), vec2(2106.315, 1626.961), vec2(2561.555, 1631.206), vec2(3008.305, 1632.975), vec2(3432.417, 1632.267), vec2(3480.523, 1635.097)
    ]);

    drawRoad([
      vec2(2569.910, 2033.471), vec2(2569.910, 1745.188), vec2(2564.958, 1582.123), vec2(2948.392, 1580.000), vec2(3321.115, 1577.525), vec2(3481.351, 1580.355), vec2(3483.827, 1757.215), vec2(3487.364, 1935.491), vec2(3489.133, 2028.520), vec2(3055.470, 2033.118)
    ]);

    drawRoad([
      vec2(3101.471, 592.241), vec2(3087.676, 658.033), vec2(3009.615, 718.695), vec2(2943.115, 667.759)
    ]);

    drawRoad([
      vec2(2556.466, 789.333), vec2(2626.149, 849.819), vec2(2675.207, 746.484)
    ]);

    drawRoad([
      vec2(2204.812, 713.572), vec2(1889.646, 705.790), vec2(1551.488, 696.239), vec2(1472.962, 949.504), vec2(1487.819, 962.238), vec2(1820.317, 967.897), vec2(2199.860, 979.216)
    ]);

    drawRoad([
      vec2(2494.510, 912.009), vec2(2133.714, 905.289), vec2(2156.706, 979.570), vec2(2490.717, 991.126)
    ]);

    drawRoad([
      vec2(2279.546, 1146.763), vec2(2275.655, 907.648), vec2(2492.486, 913.307), vec2(2488.949, 1155.960)
    ]);

    drawRoad([
      vec2(2285.205, 1021.900), vec2(2162.818, 912.600), vec2(2180.504, 859.895), vec2(2289.804, 939.483)
    ]);

    drawRoad([
      vec2(3191.664, 2459.856), vec2(3192.371, 2220.386), vec2(3192.724, 1992.179), vec2(3491.265, 1994.302), vec2(3493.034, 2242.260), vec2(3493.739, 2460.243)
    ]);

    drawRoad([
      vec2(4196.584, 2194.598), vec2(3991.706, 2193.554), vec2(3785.487, 2191.431), vec2(3580.129, 2189.318), vec2(3373.909, 2187.195), vec2(3401.853, 2427.726), vec2(3452.081, 2459.915), vec2(3750.976, 2458.854), vec2(4049.270, 2457.795), vec2(4196.772, 2458.502)
    ]);

    drawRoad([
      vec2(3548.326, 2196.798), vec2(3475.106, 2143.386), vec2(3410.729, 2176.282), vec2(3452.468, 2223.681)
    ]);

    drawRoad([
      vec2(3112.188, 2017.461), vec2(3218.658, 2068.043), vec2(3228.916, 1957.328)
    ]);

    drawRoad([
      vec2(1924.870, 650.957), vec2(1999.859, 733.021), vec2(1927.346, 752.122)
    ]);

    drawRoad([
      vec2(1962.461, 1088.083), vec2(2163.946, 1090.916), vec2(2166.776, 1206.229), vec2(1976.120, 1393.702)
    ]);
    //#endregion DRAW ROAD

    //#region DRAW HOLES
    drawHole(vec2(5322.205, 1217.711));
    drawHole(vec2(5031.800, 855.854));
    drawHole(vec2(4196.007, 1528.278));
    drawHole(vec2(4322.367, 2176.517));
    drawHole(vec2(2204.545, 3851.871));
    drawHole(vec2(513.249, 2102.367));
    drawHole(vec2(352.660, 2230.768));
    drawHole(vec2(2169.013, 4225.361));
    drawHole(vec2(3681.377, 3814.999));
    drawHole(vec2(1057.842, 1526.349));
    drawHole(vec2(1739.463, 509.991));
    // drawHole();
    //#endregion DRAW HOLES

    //#region DRAW BIKE
    drawBike([
      vec2(2183.068, 621.631), vec2(2084.920, 620.806), vec2(2029.032, 620.098), vec2(2027.617, 585.787), vec2(2027.979, 536.099), vec2(2028.333, 486.225), vec2(2026.918, 435.289), vec2(2026.564, 384.353), vec2(2026.210, 333.417), vec2(2024.795, 283.542), vec2(2018.782, 261.612), vec2(1995.083, 247.008), vec2(1958.649, 245.239), vec2(1915.495, 246.300), vec2(1872.125, 246.300), vec2(1829.777, 247.715), vec2(1800.894, 250.191), vec2(1793.820, 278.135), vec2(1792.405, 305.018), vec2(1792.405, 335.438), vec2(1792.405, 365.858), vec2(1792.405, 396.278), vec2(1791.344, 426.698), vec2(1787.453, 459.948), vec2(1782.500, 496.735), vec2(1774.365, 528.924), vec2(1763.046, 561.466), vec2(1729.181, 565.445), vec2(1695.931, 544.222), vec2(1674.708, 522.291), vec2(1647.471, 504.605), vec2(1605.378, 505.312), vec2(1561.871, 509.557), vec2(1537.464, 516.631), vec2(1529.328, 549.881), vec2(1521.560, 584.137), vec2(1512.717, 618.801), vec2(1503.874, 653.466), vec2(1495.031, 688.131), vec2(1486.188, 722.796), vec2(1477.345, 757.460), vec2(1458.598, 791.771), vec2(1439.850, 826.082), vec2(1421.457, 860.393), vec2(1406.601, 895.412), vec2(1393.159, 930.076), vec2(1392.098, 976.060), vec2(1408.723, 1014.262), vec2(1435.606, 1044.328), vec2(1463.903, 1056.001), vec2(1522.267, 1057.416), vec2(1585.584, 1058.123), vec2(1649.253, 1058.831), vec2(1712.923, 1059.538), vec2(1776.593, 1060.246), vec2(1840.263, 1060.953), vec2(1904.287, 1061.661), vec2(1968.310, 1062.368), vec2(2032.334, 1063.076), vec2(2096.357, 1063.783), vec2(2157.197, 1066.259), vec2(2182.312, 1068.028), vec2(2186.556, 1097.740), vec2(2187.618, 1128.868), vec2(2187.971, 1158.934), vec2(2190.801, 1189.708), vec2(2220.160, 1214.468), vec2(2253.410, 1236.045), vec2(2291.965, 1240.644), vec2(2341.486, 1244.181), vec2(2393.130, 1246.657), vec2(2444.321, 1249.465), vec2(2495.099, 1252.267), vec2(2546.272, 1255.090), vec2(2570.561, 1221.480), vec2(2582.234, 1181.156), vec2(2585.417, 1141.539), vec2(2586.832, 1098.385), vec2(2586.107, 1056.475), vec2(2585.400, 1013.675), vec2(2585.046, 970.875), vec2(2585.400, 928.175), vec2(2584.692, 886.536), vec2(2583.631, 846.212), vec2(2556.041, 831.002), vec2(2504.044, 821.451), vec2(2430.116, 820.036), vec2(2354.066, 816.853), vec2(2288.274, 815.084), vec2(2293.579, 756.013), vec2(2296.056, 693.050), vec2(2296.056, 630.442)
    ]);

    drawBike([
      vec2(4099.910, 2108.102), vec2(4018.308, 2108.470), vec2(3976.215, 2103.165), vec2(3973.739, 2066.731), vec2(3976.215, 1991.742), vec2(3978.691, 1916.400), vec2(3980.106, 1838.581), vec2(3980.443, 1761.719), vec2(3980.438, 1685.178), vec2(3979.731, 1609.718), vec2(3986.805, 1582.127), vec2(4083.371, 1582.481), vec2(4182.060, 1581.774), vec2(4284.639, 1585.311), vec2(4386.724, 1587.075), vec2(4488.596, 1587.075), vec2(4590.468, 1587.075), vec2(4689.510, 1587.075), vec2(4756.717, 1583.184), vec2(4773.342, 1554.178), vec2(4778.294, 1500.413), vec2(4779.355, 1426.839), vec2(4779.001, 1353.265), vec2(4777.940, 1280.044), vec2(4776.879, 1206.824), vec2(4775.818, 1133.250), vec2(4775.464, 1058.968), vec2(4776.172, 982.918), vec2(4777.233, 906.868), vec2(4778.294, 830.818), vec2(4778.648, 789.786), vec2(4772.634, 750.170), vec2(4725.943, 722.579), vec2(4633.622, 721.872), vec2(4541.301, 721.518), vec2(4448.979, 721.164), vec2(4356.658, 720.811), vec2(4264.337, 720.457), vec2(4203.850, 726.824), vec2(4192.177, 760.428), vec2(4192.885, 819.853), vec2(4189.701, 881.754), vec2(4186.872, 944.009), vec2(4190.409, 1011.216), vec2(4192.177, 1079.131), vec2(4192.177, 1146.691), vec2(4192.531, 1187.016), vec2(4155.037, 1208.946), vec2(4099.784, 1192.304), vec2(4033.638, 1187.352), vec2(3966.077, 1188.766), vec2(3895.686, 1191.243), vec2(3824.942, 1190.181), vec2(3754.198, 1188.766), vec2(3683.807, 1189.120), vec2(3613.770, 1189.120), vec2(3541.611, 1189.828), vec2(3503.763, 1215.296), vec2(3498.811, 1269.415), vec2(3493.505, 1325.657), vec2(3491.029, 1385.082), vec2(3496.335, 1447.691), vec2(3499.165, 1512.068), vec2(3500.933, 1577.153), vec2(3502.702, 1642.237), vec2(3504.471, 1707.322), vec2(3506.239, 1772.407), vec2(3508.008, 1837.492), vec2(3509.776, 1902.576), vec2(3511.545, 1967.661), vec2(3513.314, 2032.746), vec2(3514.728, 2097.831), vec2(3530.646, 2153.011), vec2(3589.364, 2164.330), vec2(3686.283, 2167.867), vec2(3788.509, 2171.051), vec2(3891.442, 2173.881), vec2(3993.924, 2174.576), vec2(4090.054, 2176.341)
    ])
    //#endregion DRAW BIKE

    //#region DRAW CAR
    drawCar([
    ]);

    //#endregion DRAW CAR

    drawWater([
    ]);

    drawDoubleBicycle([
    ]);

    drawBoat([
    ]);

    drawKebab(vec2(4897.682, 2120.561));
    drawKebab(vec2(4452.283, 2180.264));
    drawKebab(vec2(3707.700, 2930.507));
    drawKebab(vec2(3999.520, 1254.279));
    drawKebab(vec2(1738.965, 2979.088));
    drawKebab(vec2(1950.292, 993.678));
    drawKebab(vec2(3236.730, 696.941));
    drawKebab(vec2(2828.056, 2052.385));

    const peopleSpawns: {door: Vec2, road: Vec2}[] = [
      {door: vec2(2675.873, 2007.230), road: vec2(2676.227, 2055.690)},
      {door: vec2(3021.383, 2007.513), road: vec2(3022.640, 2054.259)},
      {door: vec2(2781.989, 2011.121), road: vec2(2781.636, 2055.690)},
      {door: vec2(2874.442, 2012.075), road: vec2(2873.603, 2055.337)},
      {door: vec2(3106.983, 2015.648), road: vec2(3107.691, 2055.619)},
    ];

    drawPeople(peopleSpawns);
    drawPeople(peopleSpawns);

    const peopleSpawns1 = [
      {door: vec2(1575.934, 2198.342), road: vec2(1574.519, 2239.727)},
      {door: vec2(1664.011, 2193.390), road: vec2(1663.675, 2240.792)},
      {door: vec2(1809.055, 2190.917), road: vec2(1809.762, 2240.792)},
      {door: vec2(1903.852, 2194.808), road: vec2(1904.559, 2238.670)},
      {door: vec2(2008.200, 2190.563), road: vec2(2008.200, 2236.901)}
    ]

    drawPeople(peopleSpawns1);
    drawPeople(peopleSpawns1);

    function onEnnemiHit(sound: string[] = ["hit"]) {
      isReady = false;
      isMoving = false;
      play(sound[randi(0, sound.length)], {volume: 0.5});
      player.blink({
        duration: 3,
        loops: 20,
        onFinish: () => {
          player.pos = player.lastGoodPos; // Reset to last good position
          player.lastGoodPos = player.pos; // Update last good position
          isReady = true; // Allow movement again
        }
      });
    }

    // player.onCollide("people", () => {
    //   onEnnemiHit(["ela", "mo-joenge-toch"]);
    // });

    // player.onCollide("hole", () => {
    //   onEnnemiHit(["god"]);
    // });

    // player.onCollide("bicycle", () => {
    //   onEnnemiHit(["ela", "paljas"]);
    // });

    // player.onCollide("car", () => {
    //   onEnnemiHit();
    // });

    player.onCollide("road", (o, col) => {
      console.log("Collided with road", o.myId);
      isMoving = false; // Stop moving when colliding with road
      if (col.hasOverlap()) {
        player.moveBy(col.displacement.scale(2)); // Push player back slightly
      }
    });


    player.onCollide("kebab", (obj) => {
      obj.destroy();
      play("kebab");
      player.speed += 25;
      maxSpeedText.text = `Max Speed: ${player.speed}`;
    });
  });
}


/* Car path
TOP TO DOWN
vec2(4556.272, -27.305), vec2(4648.883, 62.480), vec2(4721.871, 168.618), vec2(4796.644, 289.324), vec2(4857.811, 406.395), vec2(4916.826, 529.777), vec2(4970.193, 656.132), vec2(5017.910, 786.649), vec2(5061.763, 918.653), vec2(5105.616, 1050.657), vec2(5149.468, 1182.661), vec2(5193.321, 1314.664), vec2(5233.308, 1447.263), vec2(5271.809, 1581.050), vec2(5303.175, 1716.919), vec2(5292.918, 1854.274), vec2(5276.120, 1991.035), vec2(5250.998, 2130.174), vec2(5225.578, 2269.313), vec2(5200.159, 2408.452), vec2(5160.766, 2546.104), vec2(5086.885, 2679.297), vec2(5001.410, 2811.598), vec2(4913.556, 2944.197), vec2(4825.220, 3076.177), vec2(4737.366, 3209.667), vec2(4652.485, 3344.941), vec2(4607.964, 3427.654), vec2(4492.163, 3522.495), vec2(4376.066, 3617.038), vec2(4254.022, 3708.906), vec2(4123.950, 3793.043), vec2(3991.203, 3875.694), vec2(3855.483, 3956.264), vec2(3713.817, 4021.374), vec2(3564.421, 4083.808), vec2(3395.106, 4131.674), vec2(3224.049, 4177.492), vec2(3046.706, 4197.082), vec2(2840.822, 4215.812), vec2(2663.479, 4226.812), vec2(2486.731, 4192.919), vec2(2326.037, 4131.972), vec2(2152.262, 4067.159), vec2(1974.919, 3978.265), vec2(1796.387, 3887.289), vec2(1622.929, 3789.042), vec2(1457.181, 3677.255), vec2(1297.546, 3558.743), vec2(1138.042, 3440.118), vec2(977.943, 3321.790), vec2(817.843, 3203.463), vec2(665.772, 3080.676), vec2(522.024, 2958.483), vec2(504.335, 2819.938), vec2(503.889, 2666.826), vec2(502.848, 2516.687), vec2(502.106, 2366.690), vec2(501.363, 2216.692), vec2(503.594, 2071.451), vec2(501.959, 1978.989), vec2(498.256, 1803.780)

DOWN TO TOP
vec2(350.820, 1836.781), vec2(350.523, 1963.433), vec2(350.523, 2090.086), vec2(350.523, 2216.738), vec2(350.523, 2343.390), vec2(350.523, 2470.042), vec2(350.523, 2596.694), vec2(350.523, 2723.347), vec2(354.388, 2848.810), vec2(371.334, 2964.811), vec2(416.525, 3045.678), vec2(505.419, 3115.304), vec2(614.976, 3207.469), vec2(727.804, 3301.120), vec2(840.929, 3394.474), vec2(954.053, 3487.828), vec2(1078.773, 3576.723), vec2(1204.087, 3665.617), vec2(1329.402, 3754.214), vec2(1455.608, 3840.433), vec2(1584.787, 3917.732), vec2(1713.520, 3996.548), vec2(1842.699, 4074.145), vec2(1971.232, 4144.813), vec2(2100.114, 4203.679), vec2(2233.448, 4246.137), vec2(2383.438, 4299.057), vec2(2558.325, 4343.059), vec2(2744.885, 4354.059), vec2(2932.038, 4346.626), vec2(3099.273, 4327.301), vec2(3244.209, 4299.949), vec2(3383.497, 4266.354), vec2(3529.326, 4220.271), vec2(3746.507, 4148.026), vec2(3929.796, 4060.024), vec2(4096.733, 3964.589), vec2(4257.417, 3862.916), vec2(4408.895, 3759.156), vec2(4550.308, 3652.299), vec2(4682.758, 3542.891), vec2(4769.422, 3416.833), vec2(4849.546, 3288.397), vec2(4933.535, 3160.556), vec2(5016.334, 3032.417), vec2(5099.134, 2904.278), vec2(5181.934, 2776.139), vec2(5264.733, 2648.001), vec2(5316.316, 2503.807), vec2(5349.168, 2360.506), vec2(5378.155, 2216.015), vec2(5407.440, 2071.525), vec2(5430.184, 1927.034), vec2(5452.928, 1782.544), vec2(5420.076, 1643.107), vec2(5381.872, 1494.455), vec2(5338.911, 1346.694), vec2(5285.247, 1199.825), vec2(5234.557, 1048.199), vec2(5187.137, 894.789), vec2(5137.635, 741.974), vec2(5086.053, 589.753), vec2(5029.416, 440.803), vec2(4964.787, 298.078), vec2(4886.744, 152.101), vec2(4800.079, 44.047), vec2(4729.172, -22.251)
*/
